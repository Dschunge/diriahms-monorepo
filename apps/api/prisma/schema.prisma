datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Hotel {
  id                      String         @id @default(uuid())
  userId                  String
  name                    String         @db.Text
  description             String
  description_esp         String
  image                   String
  country                 String
  state                   String
  city                    String
  locationDescription     String
  locationDescription_esp String
  images                  String[]
  lat                     Int
  lng                     Int
  phone                   String
  phone_reservation       String?
  phone_tollfree          String?
  email                   String
  website                 String         @default("")
  facebook                String?
  tripadvisor             String?
  instagram               String?
  youtube                 String?
  whatsapp                String?
  rooms                   Room[]
  roomcategories          RoomCategory[]
  bookings                Booking[]
  activities              Activity[]
  tours                   Tour[]
  amenities               Amenities[]
  areas                   Area[]
  tvchannels              TVChannels[]
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @default(now())
}

enum TVCHANNELTYPE {
  STANDARD
  HD
}

enum TVChannelLanguages {
  ENGLISH
  SPANISH
  BOTH
}

model TVChannels {
  id              String             @id @default(uuid())
  name            String
  name_esp        String?
  description     String
  description_esp String?
  logo            String?
  channelNo       String
  languages       TVChannelLanguages @default(value: ENGLISH)
  channeltype     TVCHANNELTYPE      @default(value: STANDARD)
  category        String             @default("")
  hotelId         String
  Hotel           Hotel?             @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now())

  @@index([hotelId])
}

model Area {
  id              String     @id @default(uuid())
  name            String
  name_esp        String?
  description     String
  description_esp String?
  image           String?
  hotelId         String
  Hotel           Hotel?     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  buildings       Building[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())

  @@index([hotelId])
}

model Building {
  id              String   @id @default(uuid())
  name            String
  name_esp        String?
  description     String
  description_esp String?
  image           String?
  areaId          String
  Area            Area?    @relation(fields: [areaId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  @@index([areaId])
}

model Season {
  id               String         @id @default(uuid())
  name             String         @default("")
  description      String         @default("")
  from             DateTime       @default(now())
  to               DateTime       @default(now())
  price            Int            @default(0)
  pricePerAddGuest Int            @default(43)
  pricePerKid      Int            @default(23)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  roomcategories   RoomCategory[]
}

model RoomCategory {
  id                   String  @id @default(uuid())
  name                 String
  name_esp             String?
  description          String
  description_esp      String?
  description_long     String  @default("")
  description_Long_esp String? @default("")
  rooms                Room[]
  roomSize             Int     @default(29)

  roomId       Int     @default(0)
  roomstatus   Boolean @default(true)
  sortOrder    Int     @default(99)
  maxOccupancy Int     @default(2)
  maxAdults    Int     @default(2)
  maxKids      Int     @default(2)

  maxGuest       Int      @default(2)
  beds           Int      @default(2)
  bathrooms      Int      @default(1)
  kingSizeBeds   Int      @default(1)
  queenBeds      Int      @default(0)
  breakFastPrice Int      @default(0)
  roomService    Boolean  @default(true)
  smartTV        Boolean  @default(true)
  balcony        Boolean  @default(true)
  terrace        Boolean  @default(false)
  freeWifi       Boolean  @default(true)
  cityView       Boolean  @default(false)
  oceanView      Boolean  @default(false)
  forestView     Boolean  @default(false)
  mountainView   Boolean  @default(false)
  airCondition   Boolean  @default(false)
  soundProofed   Boolean  @default(true)
  coffeMaker     Boolean  @default(true)
  refrigirator   Boolean  @default(true)
  miniBar        Boolean  @default(false)
  safe           Boolean  @default(true)
  hotelId        String   @default("18c73427-3e4c-4627-a911-af1066b5bef3")
  Hotel          Hotel?   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  images         String[]
  seasons        Season[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@index([hotelId])
}

model Room {
  id          String       @id @default(uuid())
  name        String
  roomnumber  Int
  description String
  hotelId     String
  Hotel       Hotel?       @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  images      String[]
  Booking     Booking[]
  category    RoomCategory @relation(fields: [categoryId], references: [id])
  categoryId  String

  cleaning  Cleaning[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  //@@index([hotelId])

  @@index([categoryId])
}

enum CLEANINSTATUS {
  CLEAN
  DONOTDISTRUB
}

model Cleaning {
  id              String        @id @default(uuid())
  message         String        @default("")
  whatToBring     String[]      @default([""])
  status          CLEANINSTATUS @default(DONOTDISTRUB)
  cleaningRequest DateTime      @default(now())
  cleaningStart   DateTime      @default(now())
  cleaningEnd     DateTime      @default(now())
  finished        Boolean       @default(false)
  openTasks       String[]      @default([""])
  roomId          String
  room            Room?         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  @@index([roomId])
}

enum AMENITIESTYPE {
  HOTEL
  ROOM
}

model Amenities {
  id            String        @id @default(uuid())
  name          String
  description   String        @default("")
  icon          String        @default("")
  image         String        @default("")
  amenitiestype AMENITIESTYPE
  hotelId       String
  Hotel         Hotel?        @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())

  @@index([hotelId])
}

model Booking {
  id                String   @id @default(uuid())
  userName          String
  userEmail         String
  userId            String
  roomId            String
  hotelId           String
  hotelOwnerId      String
  startDate         DateTime
  endDate           DateTime
  breakFastIncluded Boolean
  currency          String
  totalPrice        Int
  paymentStatus     Boolean  @default(false)
  paymentIntentId   String   @unique
  bookedAt          DateTime @default(now())
  Hotel             Hotel?   @relation(fields: [hotelId], references: [id])
  Room              Room?    @relation(fields: [roomId], references: [id])

  @@index([hotelId])
  @@index([roomId])
}

model Activity {
  id              String   @id @default(uuid())
  name            String
  name_esp        String
  description     String
  description_esp String
  image           String
  profileImage    String?
  hotelId         String
  type            String
  start           DateTime @default(now())
  end             DateTime @default(now())
  price           Int
  cashOnly        Boolean
  freeOfCharge    Boolean
  location        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  Hotel           Hotel?   @relation(fields: [hotelId], references: [id])

  @@index([hotelId])
}

model Tour {
  id              String @id @default(uuid())
  name            String @default("")
  name_esp        String @default("")
  description     String @default("")
  description_esp String @default("")
  image           String @default("")
  hotelId         String @default("")
  price           Int

  category    String   @default("")
  priceKids   Float    @default(0)
  offer       Boolean  @default(false)
  discount    Float    @default(0)
  whattobring String   @default("")
  included    String[] @default([""])
  pickuptime  DateTime @default(now())
  duration    Int      @default(6)
  videos      String[] @default([""])
  images      String[] @default([""])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Hotel     Hotel?   @relation(fields: [hotelId], references: [id])

  @@index([hotelId])
}

model Restaurant {
  id               String         @id @default(uuid())
  userId           String
  name             String
  description      String
  descriptionshort String
  image            String
  address          String
  stars            Int?           @default(0)
  reviews          String?
  category         String
  opening1         String
  opening2         String
  phone            String
  offertoday       Boolean        @default(false)
  pdf_url          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  dishes           Dish[]
  reservations     Reservation[]
  images           String[]
  tables           Table[]
  dishcategories   DishCategory[]
  menuterminal     MenuTerminal?
}

model MenuTerminal {
  id                 String     @id @default(uuid())
  header             String
  header_esp         String
  subtitel           String
  subtitel_esp       String
  font_header        String
  font_size_header   String
  font_subtitel      String
  font_size_subtitel String
  mainpageImage      String
  menuImage1         String?
  menuImage2         String?
  menuImage3         String?
  menuImage4         String?
  menuImage5         String?
  bgColor            String     @default("#00a6e1")
  textColor          String     @default("#372f2e")
  marquee            String     @default("")
  timeout_mainscreen Int
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now())
  restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId       String     @unique // relation scalar field (used in the `@relation` attribute above)

  @@index([restaurantId])
}

enum DISHCATEGORY {
  BEVERAGE
  WINE
  ALCOHOLIC
  NONALCOHOLIC
  COCKTAIL
  APPETIZER
  SOUP
  MAINCOURSE
  DESSERT
  FISH
  SPECIALS
  VEGETARIAN
  SALAD
  SUSHI
  STEAK
}

model Dish {
  id              String       @id @default(uuid())
  sku             Int          @unique
  name            String
  name_esp        String
  description     String
  description_esp String
  price           Int
  image           String
  category        String
  category_esp    String
  restaurantId    String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  Restaurant      Restaurant?  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  dishCategory    DishCategory @relation(fields: [categoryId], references: [id])
  categoryId      String

  @@index([restaurantId])
  @@index([categoryId])
}

model DishCategory {
  id              String         @id @default(uuid())
  category        DISHCATEGORY[]
  name            String
  name_esp        String
  description     String?
  description_esp String?
  icon            String
  image           String?
  restaurant      Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  dishes          Dish[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())

  @@index([restaurantId])
}

model Reservation {
  id            String      @id @default(uuid())
  restaurantId  String
  guests        Int
  start         DateTime    @default(now())
  end           DateTime    @default(now())
  status        String
  reason        String?
  table         Int
  contact_name  String
  contact_phone String
  contact_notes String?
  team_notes    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  Restaurant    Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
}

model Table {
  id               String      @id @default(uuid())
  restaurantId     String
  tablenumber      Int
  seatsMin         Int
  seatsMax         Int
  area             String
  type             String
  avialiableOnline Boolean
  posX             Int
  posY             Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
  Restaurant       Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
}

//New for Auth and Payment

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // customizations for AirBadge
  customerId         String?
  subscriptionId     String?
  subscriptionStatus SubscriptionStatus?
  plan               String?
  priceId            String?
}

// customization for AirBadge
enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
